type Query {
  me: User!
  post: Post!
  comments(query: String): [Comment!]!
  users(query: String): [User!]!
  posts(query: String): [Post!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  author: User!
  published: Boolean!
  comments: [Comment!]!
  body: String!
}

type Mutation { 
  createUser(data: CreateUserInput!): User!
  createPost(data: CreatePostInput!): Post!
  createComment(data: CreateCommentInput!): Comment!
  updateUser(id: ID!, data: UpdateUserInput!): User!
  updatePost(id: ID!, data: UpdatePostInput!) : Post!
  deleteUser(id: ID!): User!
  deletePost(id: ID!): Post!
  deleteComment(id:ID!) : Comment!
  
}

input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input UpdateUserInput {
  name: String,
  email: String,
  age: Int
}

input UpdatePostInput {
  title: String,
  published: Boolean,
  body: String
}

input CreatePostInput {
  title: String!
  author: ID!
  published: Boolean!
}

input CreateCommentInput {
  text: String!
  author: ID!
  post: ID!
}